import java.awt.Image;
import java.awt.image.BufferedImage;
import java.io.File;
import java.io.FileOutputStream;
import java.io.IOException;
import javax.imageio.ImageIO;
import com.sun.image.codec.jpeg.JPEGCodec;
import com.sun.image.codec.jpeg.JPEGImageEncoder;

public class CompresspicDemo {
 private File file = null; // 文件对象 файловый объект
 private String inputDir; // 输入图路径 путь входного графа
 private String outputDir; // 输出图路径 выходной путь карты
 private String inputFileName; // 输入图文件名 входное имя файла изображения
 private String outputFileName; // 输出图文件名 имя выходного файла карты
 private int outputWidth = 100; // 默认输出图片宽 Ширина выходного изображения по умолчанию
 private int outputHeight = 100; // 默认输出图片高 Высота выходного изображения по умолчанию
 private boolean proportion = true; // 是否等比缩放标记(默认为等比缩放) Пропорционально ли масштабировать флаг (по умолчанию используется пропорциональное масштабирование)
 public CompresspicDemo() { // 初始化变量 Инициализировать переменные
 inputDir = "";
 outputDir = "";
 inputFileName = "";
 outputFileName = "";
 outputWidth = 100;
 outputHeight = 100;
 }
 public void setInputDir(String inputDir) {
 this.inputDir = inputDir;
 }
 public void setOutputDir(String outputDir) {
 this.outputDir = outputDir;
 }
 public void setInputFileName(String inputFileName) {
 this.inputFileName = inputFileName;
 }
 public void setOutputFileName(String outputFileName) {
 this.outputFileName = outputFileName;
 }
 public void setOutputWidth(int outputWidth) {
 this.outputWidth = outputWidth;
 }
 public void setOutputHeight(int outputHeight) {
 this.outputHeight = outputHeight;
 }
 public void setWidthAndHeight(int width, int height) {
 this.outputWidth = width;
 this.outputHeight = height;
 }

 /*
 * 获得图片大小 * Получить размер изображения
 * 传入参数 String path ：图片路径 Входящий параметр String path : путь к изображению
 */
         public long getPicSize(String path) {
 file = new File(path);
 return file.length();
 }

 // 图片处理 Обработка изображения
         public String compressPic() {
 try {
 //获得源文件 получить исходный файл
 file = new File(inputDir + inputFileName);
 if (!file.exists()) {
 return "";
 }
 Image img = ImageIO.read(file);
 // 判断图片格式是否正确 Определить, правильный ли формат изображения
 if (img.getWidth(null) == -1) {
 System.out.println(" can't read,retry!" + "<BR>");
 return "no";
 } else {
 int newWidth; int newHeight;
 // 判断是否是等比缩放 Определите, является ли это пропорциональным масштабированием
 if (this.proportion == true) {
 // 为等比缩放计算输出的图片宽度及高度 Рассчитать ширину и высоту выходного изображения для пропорционального масштабирования
 double rate1 = ((double) img.getWidth(null)) / (double) outputWidth + 0.1;
 double rate2 = ((double) img.getHeight(null)) / (double) outputHeight + 0.1;
 // 根据缩放比率大的进行缩放控制 // Выполняем управление масштабированием в соответствии с большим коэффициентом масштабирования
 double rate = rate1 > rate2 ? rate1 : rate2;
 newWidth = (int) (((double) img.getWidth(null)) / rate);
 newHeight = (int) (((double) img.getHeight(null)) / rate);
 } else {
 newWidth = img.getWidth(null); // 输出的图片宽度 ширина выходного изображения
 newHeight = img.getHeight(null); // 输出的图片高度 высота выходного изображения
 }
 BufferedImage tag = new BufferedImage((int) newWidth, (int) newHeight, BufferedImage.TYPE_INT_RGB);

 /*
 * Image.SCALE_SMOOTH 的缩略算法 生成缩略图片的平滑度的
 * 优先级比速度高 生成的图片质量比较好 但速度慢 Приоритет выше скорости, качество генерируемого изображения лучше, но скорость низкая
 */
 tag.getGraphics().drawImage(img.getScaledInstance(newWidth, newHeight, Image.SCALE_SMOOTH), 0, 0, null);
 FileOutputStream out = new FileOutputStream(outputDir + outputFileName);
 // JPEGImageEncoder可适用于其他图片类型的转换 JPEGImageEncoder подходит для преобразования других типов изображений.
 JPEGImageEncoder encoder = JPEGCodec.createJPEGEncoder(out);
 encoder.encode(tag);
 out.close();
 }
 } catch (IOException ex) {
 ex.printStackTrace();
 }
 return "ok";
 }
 public String compressPic (String inputDir, String outputDir, String inputFileName, String outputFileName) {
 // 输入图路径 путь входного графа
 this.inputDir = inputDir;
 // 输出图路径 путь входного графа
 this.outputDir = outputDir;
 // 输入图文件名 входное имя файла изображения
 this.inputFileName = inputFileName;
 // 输出图文件名 входное имя файла изображения
 this.outputFileName = outputFileName;
 return compressPic();
 }
 public String compressPic(String inputDir, String outputDir, String inputFileName, String outputFileName, int width, int height, boolean gp) {
 // 输入图路径  путь входного графа
 this.inputDir = inputDir;
 // 输出图路径  путь входного графа
 this.outputDir = outputDir;
 // 输入图文件名 входное имя файла изображения
 this.inputFileName = inputFileName;
 // 输出图文件名 входное имя файла изображения
 this.outputFileName = outputFileName;
 // 设置图片长宽 Установить высоту и ширину изображения
 setWidthAndHeight(width, height);
 // 是否是等比缩放 标记 Нет масштабируется флаг
 this.proportion = gp;
 return compressPic();
 }

 // main测试   test
         // compressPic(大图片路径,生成小图片路径,大图片文件名,生成小图片文名,生成小图片宽度,生成小图片高度,是否等比缩放(默认为true)) (Путь к большому изображению, сгенерировать путь к маленькому изображению, имя файла с большим изображением, сгенерировать имя файла с маленьким изображением, сгенерировать маленькую ширину изображения, сгенерировать маленькую высоту изображения, пропорционально ли масштабировать (по умолчанию верно))
         public static void main(String[] arg) {
 CompresspicDemo mypic = new CompresspicDemo();
 System.out.println("输入的图片大小：" + mypic.getPicSize("e:\\1.jpg")/1024 + "KB");
 mypic.compressPic("e:\\", "e:\\test\\", "1.jpg", "r1.jpg", 120, 120, false);

 }
}
